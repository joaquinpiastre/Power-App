"""empty message

Revision ID: 138d769e17da
Revises: e21f068a44ce
Create Date: 2023-09-28 18:43:51.270413

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '138d769e17da'
down_revision = 'e21f068a44ce'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Classes',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('instructor', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('name')
    )
    op.drop_table('trainingType')
    op.drop_table('fitnessClass')
    with op.batch_alter_table('gym', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.String(), nullable=False))
        batch_op.add_column(sa.Column('specialty', sa.String(), nullable=True))
        batch_op.drop_constraint('gym__Gym__location_key', type_='unique')
        batch_op.drop_constraint('gym__Gym__offeredClasses_key', type_='unique')
        batch_op.drop_column('_Gym__offeredClasses')
        batch_op.drop_column('_Gym__location')
        batch_op.drop_column('_Gym__name')

    with op.batch_alter_table('reserve', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('date', sa.DateTime(), nullable=True))
        batch_op.create_unique_constraint(None, ['user'])
        batch_op.drop_column('_Reserve__date')
        batch_op.drop_column('_Reserve__user')
        batch_op.drop_column('_Reserve__schedule')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('reserve', schema=None) as batch_op:
        batch_op.add_column(sa.Column('_Reserve__schedule', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('_Reserve__user', sa.INTEGER(), server_default=sa.text('nextval(\'"reserve__Reserve__user_seq"\'::regclass)'), autoincrement=True, nullable=False))
        batch_op.add_column(sa.Column('_Reserve__date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('date')
        batch_op.drop_column('user')

    with op.batch_alter_table('gym', schema=None) as batch_op:
        batch_op.add_column(sa.Column('_Gym__name', sa.VARCHAR(length=120), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('_Gym__location', sa.VARCHAR(length=120), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('_Gym__offeredClasses', sa.VARCHAR(length=120), autoincrement=False, nullable=True))
        batch_op.create_unique_constraint('gym__Gym__offeredClasses_key', ['_Gym__offeredClasses'])
        batch_op.create_unique_constraint('gym__Gym__location_key', ['_Gym__location'])
        batch_op.drop_column('specialty')
        batch_op.drop_column('name')

    op.create_table('fitnessClass',
    sa.Column('_FitnessClass__name', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('_FitnessClass__instructor', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('_FitnessClass__schedule', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('_FitnessClass__maxCapacity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('_FitnessClass__name', name='fitnessClass_pkey'),
    sa.UniqueConstraint('_FitnessClass__instructor', name='fitnessClass__FitnessClass__instructor_key'),
    sa.UniqueConstraint('_FitnessClass__maxCapacity', name='fitnessClass__FitnessClass__maxCapacity_key')
    )
    op.create_table('trainingType',
    sa.Column('_TrainingType__name', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('_TrainingType__name', name='trainingType_pkey')
    )
    op.drop_table('Classes')
    # ### end Alembic commands ###
